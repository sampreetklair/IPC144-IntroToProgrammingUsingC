*****************************************************************************
                               Reflection
                             Workshop - #7
Full Name  : Aryan Khurana
Student ID#: 145282216
Email      : akhurana22@myseneca.ca
Section    : NJJ

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************

1. Structs enable us to combine complex records by using a single name. They result in an increase in productivity and contribute towards enhancing the readability and maintainability of code. Structured data can also be processed efficiently and the programming of tasks that are performed on the structured data can be simplified considerably too. Instead of coding a separate instruction for each variable, we can code an instruction for a struct altogether.
For example) In this week's workshop, I made a game in C for which I used two structs to store the player's and the game's configuration options respectively. The structs are as follows:

struct playerInfo {
    int lives;
    char playerCharacter;
    int treasureCount;
    int positionHistory[MAXIMUM_PATH_LENGTH];
};

struct gameInfo {
    int moves;
    int pathLength;
    int bombLocations[MAXIMUM_PATH_LENGTH];
    int treasureLocations[MAXIMUM_PATH_LENGTH];
};

These helped me a lot in this program. Instead of defining 8 variables and keeping track of them individually, I was able to organize my code in a better manner and make two groups of four variables each in order to make my workflow more efficient.

2. To do so, the following changes have to be made:
I. Initializing a results array:
- In the results array, we can store the number of treasures the user manages to collect in every single game.
II. Initializing an integer variable called 'gameCount'
- This variable will increment every time a game ends. This will help us to keep track of the number of games that have been played.

3. I spent the most time working on coding the ruler. It was a very difficult task for me as I had to use a combination of for loops, conditionals, structs and arrays to complete the task. The main problem that I was facing was that I was initially unable to reveal the location of bombs and treasures. As soon as I went to the next iteration, the last data disappeared. To fix this, I use some more conditions in the conditional statements. I used the history to determine whether the player has passed a particular space or not. If yes, what did he/she find there? Using this technique, I was successful in solving the problem.
